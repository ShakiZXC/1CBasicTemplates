!
Право - это возведенная в закон воля господствующего класса

Описание типов это объект, который используется, чтобы ограничить ввод данных, 
а квалификаторы это объекты которые дополняют ограничения для простых типов.

//---------------------------------------------------------------------------------------------------------------------
Функция ТабличныйДокументВТаблицуЗначений(ТабДок)
	
	ТаблицаДанныеДокумента = Новый ТаблицаЗначений();
	Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
		ИмяКолонки = "_" + СчетчикКолонок;
		ТаблицаДанныеДокумента.Колонки.Добавить(ИмяКолонки);
		Для СчетчикСтрок = 1 По ТабДок.ВысотаТаблицы Цикл
			ИндексСтроки = СчетчикСтрок - 1;
			Если СчетчикКолонок = 1 Тогда
				СтрокаТаблицы = ТаблицаДанныеДокумента.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаДанныеДокумента[ИндексСтроки];
			КонецЕсли;
			ТекущаяЯчейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
			ЗначениеЯчейки = ТекущаяЯчейка.Текст;
			СтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
		КонецЦикла
	КонецЦикла;
	Возврат ТаблицаДанныеДокумента;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Производитель (""Общие"")");
	Значение = ПолучитьЗначениеДопРеквизита(Справочники.Номенклатура.НайтиПоНаименованию("Fabia Monti мет 063 - 5.5") , Свойство);

Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт

    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Свойство", Свойство);
    Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);

    Если Массив.Количество() = 0 Тогда
        Возврат Неопределено;
    Иначе
        Возврат Массив[0].Значение;
    КонецЕсли;

КонецФункции


Функция ЗаписатьЗначениеДопРеквизита(Ссылка, Свойство, Значение)
	
    Попытка
        ОбъектСсылки = Ссылка.ПолучитьОбъект();
		
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Свойство",Свойство);
	Массив = ОбъектСсылки.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
		
	Если Массив.Количество() = 0 Тогда
        НовоеСвойство = ОбъектСсылки.ДополнительныеРеквизиты.Добавить();
	    НовоеСвойство.Свойство = Свойство; //// НЕ ВЕРНО !!! - не наименование а ссылка на ПВХ
	    НовоеСвойство.Значение = Значение;
	Иначе
	    Массив[0].Значение = Значение;
	КонецЕсли;	
	
	ОбъектСсылки.Записать();	
    Исключение
	Возврат Ложь;
    КонецПопытки
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
// перебор ТЗ с удалением строк по условию
	СтаршийИндексКолонок = ЗаказыТЗ.Колонки.Количество() - 1; 
	Индекс = ЗаказыТЗ.Количество() - 1; 
	Пока Индекс >= 0 Цикл 
		Для Сч = 0 По СтаршийИндексКолонок Цикл 
			Если СтрДлина(Строка(ЗаказыТЗ[Индекс][Сч])) < 1  Тогда 
				ЗаказыТЗ.Удалить(Индекс); 
				Прервать; 
			КонецЕсли; 
		КонецЦикла; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
// удалить все записи в регистре, 
НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей(); // ИмяРегистра например "УчетнаяПолитика", "ЦеныНоменклатуры" и т.д
НаборЗаписей.Записать();

//---------------------------------------------------------------------------------------------------------------------
целое и дробь в запросе
<?xml version="1.0" encoding="UTF-8"?>
<querylist>
	<query name="ВЫБОР
		КОГДА (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) &gt; ">
		<text>ВЫБРАТЬ
	ВЫБОР
		КОГДА (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) &gt; &amp;Цена
			ТОГДА (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) - 1
		ИНАЧЕ ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))
	КОНЕЦ КАК Целая,
	Дро.Поле1 * 100 КАК ДробнаяЧасть
ИЗ
	(ВЫБРАТЬ
		ВЫБОР
			КОГДА (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) = &amp;Цена
				ТОГДА 0
			КОГДА (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) &gt; &amp;Цена
				ТОГДА 1 - ((ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0))) - &amp;Цена)
			ИНАЧЕ &amp;Цена - (ВЫРАЗИТЬ(&amp;Цена КАК ЧИСЛО(4, 0)))
		КОНЕЦ КАК Поле1) КАК Дро
</text>
		<parameters>
			<parameter name="Цена" type="Число" value="7.99"/>
		</parameters>
	</query>
</querylist>


//---------------------------------------------------------------------------------------------------------------------
Функция ПеребратьМетаданные()
			
	//Коллекции объектов метаданных
	КоллекцияОбъектов = Метаданные.Документы;
	КоллекцияОбъектов = Метаданные.Справочники;
	КоллекцияОбъектов = Метаданные.РегистрыСведений;	
	КоллекцияОбъектов = Метаданные.РегистрыНакопления;
	КоллекцияОбъектов = Метаданные.РегистрыБухгалтерии;
	КоллекцияОбъектов = Метаданные.РегистрыРасчета;
	//...
	//...
	//...
	
	//Перебрать коллекцию объектов метаданных	
	Для каждого Метаданное Из КоллекцияОбъектов Цикл
				
		Имя = Метаданное.Имя;
		Синоним = Метаданное.Синоним;
		Комментарий = Метаданное.Комментарий;
		//...
		//...
		//...
		
	КонецЦикла;

КонецФункции 

//---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция этоНовый() // новый ли это документ, для управляемых форм
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат Истина;
	иначе 
		возврат ложь;
	КонецЕсли;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
Функция ДатаСозданияСсылки(Ссылка)	
	
	ГУИД = Ссылка.УникальныйИдентификатор();
	Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
	Разрядность = СтрДлина(Строка16);
	ЧислоСек = 0;
	Для Позиция = 1 По Разрядность Цикл
		ЧислоСек = ЧислоСек + Найти("123456789abcdef", Сред(Строка16, Позиция, 1)) * Pow(16, Разрядность - Позиция);
	КонецЦикла;
	ЧислоСек = ЧислоСек / 10000000;
	Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
	
КонецФункции   

//---------------------------------------------------------------------------------------------------------------------
// все документы конфигурации, получение ссылки и перебор
    ТекстЗапроса = "";
    Для каждого Вид Из Метаданные.Документы Цикл
        Если ТекстЗапроса<>"" Тогда
            ТекстЗапроса=ТекстЗапроса+"
            |ОБЪЕДИНИТЬ ВСЕ";
        КонецЕсли;         
         ТекстЗапроса = ТекстЗапроса+"
         |ВЫБРАТЬ Ссылка
         |ИЗ Документ."+Вид.Имя;
     КонецЦикла; 
     Запрос = Новый Запрос(ТекстЗапроса);
     Выборка = Запрос.Выполнить().Выбрать();
     Пока Выборка.Следующий() Цикл
         Сообщить(Выборка.Ссылка);
     КонецЦикла;

//---------------------------------------------------------------------------------------------------------------------
// Условное оформление кодом
	//
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "СозданПрограммно";
	//Отбор
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	//Оформление
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,11,Истина,,,));
	
	//Поле оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен");
	
	//
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "СозданПрограммно";
	//Отбор
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен.БазоваяЦена");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = 0;
	
	//Оформление
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.Розовый);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",   "<не задана>");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  WebЦвета.Серый);
	
	//Поле оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦенБазоваяЦена");
	
	
	//оформление программно созданных колонок "Интервалы"
	Для Каждого СтрокаИнтервала Из Интервалы Цикл 
		
		ИдентификаторИнтервала = СтрокаИнтервала.ИдентификаторИнтервала;
		ИмяПоля_РИзмЦены = СтрЗаменить(ИдентификаторИнтервала, ПрефиксИмениИнтервал, ПрефиксИмениРучИзмЦены);
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		//
		ЭлементОформления.Представление = "СозданПрограммно";
		
		//Отбор
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен."+ИмяПоля_РИзмЦены);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение  = Истина;
		
		//Оформление
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Бежевый);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
		
		//Поле оформления
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИдентификаторИнтервала);
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		//
		ЭлементОформления.Представление = "СозданПрограммно";
		
		//Отбор
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен."+ИдентификаторИнтервала);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение  = 0;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЦен.ЭтоГруппа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение  = Ложь;
		
		//Оформление
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.Розовый);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",   "<не задана>");
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  WebЦвета.Серый);
		
		//Поле оформления
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИдентификаторИнтервала);
		
	КонецЦикла;	

//---------------------------------------------------------------------------------------------------------------------
// рекурсия
Функция ВерхнийРодительЭлементаСправочника(Элемент, Имя = "")
	СоставноеИмя = СокрЛП(Элемент) + "\" + Имя;
	Если НЕ ЗначениеЗаполнено(Элемент.Родитель) Тогда 
		//Возврат СоставноеИмя;
		Возврат Элемент;
	Иначе
		Возврат ВерхнийРодительЭлементаСправочника(Элемент.Родитель, СоставноеИмя );
	КонецЕсли;
КонецФункции           

#Удаление #КонецУдаления
#Вставка #КонецВставки

СтратегияЗаполнения = Новый Соответствие;
СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнойНакладной";

//---------------------------------------------------------------------------------------------------------------------
#Область Регисстрация
// Стандартные Функции и Методы для  регистрации внешней печатной формы +

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	
	МассивНазначений.Добавить("Документ.ПеремещениеЗапасов"); //Указываем документ к которому делаем внешнюю печ. форму
	МассивНазначений.Добавить("Документ.РасходнаяНакладная"); //Указываем документ к которому делаем внешнюю печ. форму 
	//может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Приказ на отгрузку -  поскладская");
	ПараметрыРегистрации.Вставить("Версия", "0.1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	//так будет выглядеть описание печ.формы для пользователя
	ПараметрыРегистрации.Вставить("Информация", "Приказ на отгрузку -  поскладская");

	Команды = Новый ТаблицаЗначений;
	//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	//имя макета печ.формы
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	//ВызовСерверногоМетода
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	ТаблицаКоманд = Команды;
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = "Приказ на отгрузку -  поскладская";
	НоваяКоманда. Идентификатор= "Приказ на отгрузку -  поскладская";
	НоваяКоманда. Использование= "ВызовСерверногоМетода";
	НоваяКоманда. ПоказыватьОповещение= Истина;
	НоваяКоманда. Модификатор= "ПечатьMXL";
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Стандартная регистрация внешней печатной формы -
#КонецОбласти

#Область Регисстрация
// Стандартные Функции и Методы для  регистрации внешней печатной формы +

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	
	МассивНазначений.Добавить("Документ.ПеремещениеЗапасов"); //Указываем документ к которому делаем внешнюю печ. форму
	МассивНазначений.Добавить("Документ.РасходнаяНакладная"); //Указываем документ к которому делаем внешнюю печ. форму 
	//может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Приказ на отгрузку -  поскладская");
	ПараметрыРегистрации.Вставить("Версия", "0.1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	//так будет выглядеть описание печ.формы для пользователя
	ПараметрыРегистрации.Вставить("Информация", "Приказ на отгрузку -  поскладская");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Приказ на отгрузку -  поскладская", "Приказ на отгрузку -  поскладская", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	//имя макета печ.формы
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	//ВызовСерверногоМетода
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
КонецФункции

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор= Идентификатор;
	НоваяКоманда.Использование= Использование;
	НоваяКоманда.ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда.Модификатор= Модификатор;
	
КонецФункции

// Стандартные Функции и Методы для  регистрации внешней печатной формы -
#КонецОбласти

//---------------------------------------------------------------------------------------------------------------------
// Функция преобразует ТаблицуЗначений в Массив из структур.
//
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) Экспорт
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

//---------------------------------------------------------------------------------------------------------------------
Попытка
Исключение  
Инфо = ИнформацияОбОшибке();
Сообщить("Описание='" + Инфо.Описание + "'");
Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");				

Ошибка = ОписаниеОшибки(); 
ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка, , , Ошибка);  
КонецПопытки;

//---------------------------------------------------------------------------------------------------------------------
XML - правила, сущности
Сущность	Символ	Значение
&lt;	<	меньше, чем
&gt;	>	больше, чем
&amp;	&	амперсанд
&apos;	'	апостроф
&quot;	"	кавычки

//---------------------------------------------------------------------------------------------------------------------
// запрос к ТЗ !
//Создаем таблицу значений
 
 ТаблицаДанных = Новый ТаблицаЗначений;
 ТаблицаДанных.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
 ТаблицаДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
 ТаблицаДанных.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));

// типизирована должна быть передаваемая ТЗ
Запрос = Новый Запрос;
Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
МенеджерТаблицыДанных = Запрос.МенеджерВременныхТаблиц;
Запрос.Текст="ВЫБРАТЬ
|*
|ПОМЕСТИТЬ ВТ_ТаблицаДанных
|ИЗ
|&ТЗ КАК ТЗ";
Запрос.УстановитьПараметр("ТЗ", ТаблицаДанных);
Запрос.Выполнить();

ЗапросКбазеДанных = Новый Запрос;
 ЗапросКбазеДанных.МенеджерВременныхТаблиц = МенеджерТаблицыДанных;
 ЗапросКбазеДанных.Текст="ВЫБРАТЬ
 | ВТ_ТаблицаДанных.Штрихкод,
 | ВТ_ТаблицаДанных.Количество,
 | ВТ_ТаблицаДанных.Цена,
 | Штрихкоды.Владелец КАК Номенклатура
 |ИЗ
 | ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
 | ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
 | ПО ВТ_ТаблицаДанных.Штрихкод = Штрихкоды.Штрихкод";

 //---------------------------------------------------------------------------------------------------------------------
 
	//Пока ЧтениеJSON.Прочитать() Цикл
		//Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
		//	Пока ЧтениеJSON.Прочитать() Цикл
		//		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда	
		//		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
		//			Пока ЧтениеJSON.Прочитать() Цикл	
		//				Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
		//					// Сообщить("Свойство: " + ЧтениеJSON.ТекущееЗначение);	
		//					
		//				ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка 
		//					или ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		//					или ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		//					или ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево
		//					Тогда
		//					//Сообщить("Значение: " + ЧтениеJSON.ТекущееЗначение);
		//					
		//				ИначеЕсли 
		//					ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
		//					Сообщить ("---");
		//				КонецЕсли;
		//			КонецЦикла;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
	//КонецЦикла;

//---------------------------------------------------------------------------------------------------------------------

// вариант заполнение соответствия
СтратегияЗаполнения = Новый Соответствие;   
СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";

//---------------------------------------------------------------------------------------------------------------------

// добавим в регистр сведений несколько записей

НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Объект.Установить(ПолеВводаНоменклатура); 
Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл 
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.Объект = ПолеВводаНоменклатура; 
	НоваяЗапись.Свойство = СтрокаТаблицы.Свойство; 
	НоваяЗапись.Значение = СтрокаТаблицы.ЗначениеСвойства; 
КонецЦикла; 
НаборЗаписей.Записать();

//---------------------------------------------------------------------------------------------------------------------
// удалим строки ТЧ таблчинйо части по условию
	КолВо = ПриходныйДокумент.Запасы.Количество()-1;
	ИндексСтроки = КолВо;
	Для счетчик = 0 по КолВо Цикл
		Запись = ПриходныйДокумент.Запасы.Получить(ИндексСтроки);
	 	Если Запись.Количество = 0 Тогда
	        ПриходныйДокумент.Запасы.Удалить(Запись);
	    КонецЕсли;
	ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;   

//---------------------------------------------------------------------------------------------------------------------
// вызов процедуры через-после оповещения
	Оповещение = Новый ОписаниеОповещения("СформироватьЗаказыЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);

//---------------------------------------------------------------------------------------------------------------------
// очистка регистра сведений
НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
НаборЗаписей.Записать(); 


// работа с объектом на сервере
// и возврат изменений назад на клиент
1. ЭтотДок = РеквизитФормыВЗначение("Объект");
2. ЗначениеВРеквизитФормы(ЭтотДок, "Объект");

// УНФ, 
//- образец для рублей
ЧислоПрописью(Итого, "Л=ru_RU; ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");

//---------------------------------------------------------------------------------------------------------------------
&НаСервере
Функция ВернутьРеквизитОбъекта(текОбъект, текРеквизит)
	Попытка
		Возврат текОбъект[текРеквизит];
	Исключение
		Возврат "";
	КонецПопытки;		
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
Функция ПолучитьТекстИзБуфераОбмена() Экспорт
#Если Клиент Тогда
    Объект = Новый COMОбъект("htmlfile");
    Возврат Объект.ParentWindow.ClipboardData.Getdata("Text");
#КонецЕсли
КонецФункции
 
Функция УстановитьТекстВБуферОбмена(Текст) Экспорт
#Если Клиент Тогда 
    Объект = Новый COMОбъект("htmlfile");
    Объект.ParentWindow.ClipboardData.Setdata("Text", Текст);
    Возврат Текст;
#КонецЕсли 
КонецФункции 

//---------------------------------------------------------------------------------------------------------------------
// свернуть массив
ВыборкаНомера = ОбщаяВыборка.ВыгрузитьКолонку("Номер");
СвернутыйМассив = Новый Массив;
Для каждого Элемент Из ВыборкаНомера Цикл
	Если СвернутыйМассив.Найти(Элемент) = Неопределено Тогда
		//если такого значения в массиве еще нет, добавим его
		СвернутыйМассив.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

//---------------------------------------------------------------------------------------------------------------------
// удалить записи независимого регистра сведений с отбором
НаборЗаписей = РегистрыСведений.ОбъектыСтроительстваОрганизаций.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Организация.Установить(УдаляемаяОрганизация);
НаборЗаписей.Записать();   

//---------------------------------------------------------------------------------------------------------------------
// Windows Script
//WSHNetwork = Новый ComОбъект("WScript.Network");
//ИмяПользователяWindows = WSHNetwork.UserName;
//Сообщить (ИмяПользователяWindows);

//---------------------------------------------------------------------------------------------------------------------
// обход всех докуентов через метаданные
Запрос = Новый Запрос;
ТЗ = "Выбрать Док.Ссылка Из Документ.&ВидДок КАК Док";
Для каждого Метадок из Метаданные.документы Цикл
	Запрос.Текст = СтрЗаменить(ТЗ, "&ВидДок", МетаДок.Имя);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Если СтрДлина(Док.Комментарий) > 0 Тогда
			Сообщить(Строка(Док.Комментарий));
		КонецЕсли;
		//         Док.Удалить();
	КонецЦикла;
КонецЦикла;

//---------------------------------------------------------------------------------------------------------------------
// полнотекстовый поиск !!!
&НаСервере
Функция ПоискВКомментарии(Комментарий)
	
	СтрокаПоиска = Комментарий;
	РазмерПорции = 1;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.НеИспользовать;
	СписокПоиска.ОбластьПоиска.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	СписокПоиска.ПолучатьОписание = Истина;
	СписокПоиска.ПолучатьПредставление = Истина;
	СписокПоиска.ПорогНечеткости = 0;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		//ВызватьИсключение 
		//"Не удалось выполнить запрос полнотекстового поиска: "
		//+ ОписаниеОшибки();
	КонецПопытки;
	
	Если СписокПоиска.Количество() > 0 Тогда
		Если СписокПоиска[0].Значение <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
Рег = РегистрыСведений.агКроссыАртикулов;
    Выборка = Рег.Выбрать();
    Пока Выборка.Следующий() Цикл
        Запись = Выборка.ПолучитьМенеджерЗаписи();
        Запись.Прочитать();
        Запись.КодАналога = Корректировка(СтрЗаменить(Строка(Выборка.КодАналога)," ",""));
        Запись.КодОригинала = Корректировка(СтрЗаменить(Строка(Выборка.КодОригинала)," ",""));
        Запись.Записать();
    КонецЦикла;

//---------------------------------------------------------------------------------------------------------------------
Как программно изменить проводку в Регистре Бухгалтерии?
Код 1C v 8.х
 //Необходимо изменить существующие проводки и добавить значение Субконто
Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Объект.Ссылка);
Набор.Прочитать();
Для каждого Запись из Набор Цикл
    
    Если Запись.СчетКт =  ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами Тогда
	// для переборов субконто
        Запись.СубконтоКт[Запись.СчетКт.ВидыСубконто[1]] = Объект.ДоговорКонтрагента;
	// указывая конкретное значение
	//Запись.СубконтоКт.Договоры = Объект.ДоговорКонтрагента;
    КонецЕСли;
  
КонецЦикла;
Набор.Записать();   


Код 1C v 8.х
  // Перебор и замена реквизитов в проводках операции
   НаборЗаписейБУ = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
   НаборЗаписейБУ.Отбор.Регистратор.Использование = Истина;
   НаборЗаписейБУ.Отбор.Регистратор.Значение = ОперацияБух;
   НаборЗаписейБУ.Прочитать();
   Для Каждого ЗаписьБУ Из НаборЗаписейБУ Цикл
      Если (ЗаписьБУ.СчетКт = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог) или
          (ЗаписьБУ.СчетКт = ПланыСчетов.Типовой.СоциальныйНалог) Тогда
         
         ВидСубк = ЗаписьБУ.СчетКт.ВидыСубконто[2].ВидСубконто;
         ЗаписьБУ.СубконтоКт.Вставить(ВидСубк, Контрагент);
      
         ЕстьИзменения = Истина;
      КонецЕсли;
   КонецЦикла;
   Если ЕстьИзменения Тогда
      НаборЗаписейБУ.Записать();
   КонецЕсли;   

//---------------------------------------------------------------------------------------------------------------------
структура подчиненности

// Основной параметр функций "ДокументСсылка" - обязательный. Это ссылка на документ, для которого будем получать родительские (подчиненные) документы.
// Также может быть полезен в работе параметр "СписокСвязанныхДокументов". Он не является обязательным, и используется для хранения списка документов из структуры подчиненности.
// Его можно задать, если, например, нужен общий список и родительских, и подчиненных документов.

// Примеры:

// 1. Получение общего списка родительских документов двух и более документов.

// СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(ДокументСсылка1);
// СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(ДокументСсылка2, СписокСвязанныхДокументов);
// 2. Получение общего списка и родительских, и подчиненных документов.
//СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(ДокументСсылка);
//СписокСвязанныхДокументов = ПолучитьПодчиненныеДокументы(ДокументСсылка, СписокСвязанныхДокументов);

Функция ПолучитьРодительскиеДокументы(ДокументСсылка, СписокСвязанныхДокументов = Неопределено, мУжеВСписке = Неопределено) Экспорт 
    
    Если СписокСвязанныхДокументов = Неопределено Тогда 
        СписокСвязанныхДокументов = Новый СписокЗначений;
    КонецЕсли;
    Если мУжеВСписке = Неопределено Тогда 
        мУжеВСписке = Новый Соответствие;
    КонецЕсли;
    
    МетаданныеДокумента = ДокументСсылка.Метаданные();
    СписокРеквизитов = Новый СписокЗначений;
    
    Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
        ТипыРеквизита = Реквизит.Тип.Типы();
        Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
            МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
                    
            Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
                 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
                Попытка
                    ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
                Исключение
                    Прервать;
                КонецПопытки;
                ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
                     И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
                    Попытка
                        СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
                    Исключение
                         ОтладкаТекстОшибки = ОписаниеОшибки();
                    КонецПопытки;    
                КонецЕсли;
            КонецЕсли;            
            
        КонецЦикла;
    КонецЦикла;
    
    Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
        СтрРеквизитов = "";
        
        Попытка
            СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
        Исключение
            Прервать;
        КонецПопытки;
        
        Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
            ТипыРеквизита = Реквизит.Тип.Типы();
            Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
                МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);                
                Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
                    И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
                    СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
                    Прервать;
                КонецЕсли;                        
            КонецЦикла;
        КонецЦикла;
        
        СодержимоеТЧ.Свернуть(СтрРеквизитов);
        Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
            Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
                Попытка
                    ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
                Исключение
                    Продолжить;
                КонецПопытки;
                МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
                Если МетаданныеЗначения = Неопределено Тогда
                    // базовый тип
                    Продолжить;
                КонецЕсли;
                
                ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
                     И Метаданные.Документы.Содержит(МетаданныеЗначения)
                     И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
                    Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
                        Попытка
                            СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
                        Исключение
                            ОтладкаТекстОшибки = ОписаниеОшибки();
                        КонецПопытки;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЦикла;        
    КонецЦикла;
    мУжеВСписке.Вставить(ДокументСсылка, Истина);
    
    Для Каждого СтрСЗ Из СписокРеквизитов Цикл 
        СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(СтрСЗ.Значение, СписокСвязанныхДокументов, мУжеВСписке);
    КонецЦикла;
        
    Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
                           | ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
                           
    Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
    
    Выборка  = Запрос.Выполнить().Выбрать();
    ЕСли Выборка.Следующий() Тогда        
        СписокСвязанныхДокументов.Добавить(Выборка.Ссылка);
    Иначе
        СписокСвязанныхДокументов.Добавить(ДокументСсылка);
    КонецЕсли;
    
    Возврат СписокСвязанныхДокументов;
        
КонецФункции

Функция ПолучитьПодчиненныеДокументы(ДокументСсылка, СписокСвязанныхДокументов = Неопределено, мУжеВСписке = Неопределено) Экспорт
    
    Если СписокСвязанныхДокументов = Неопределено Тогда 
        СписокСвязанныхДокументов = Новый СписокЗначений;
    КонецЕсли;
    Если мУжеВСписке = Неопределено Тогда 
        мУжеВСписке = Новый Соответствие;
    КонецЕсли;
    
    Таблица = ПолучитьВыборкуПоКритериюОтбора("СвязанныеДокументы", ДокументСсылка);    
    КэшПоТипамДокументов = Новый Соответствие;
    
    Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
        МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
        Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
            Продолжить;
        КонецЕсли;            
        ИмяДокумента = МетаданныеДокумента.Имя;
        СинонимДокумента = МетаданныеДокумента.Синоним;
        
        СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
        Если СтруктураТипа = Неопределено Тогда
            СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
            КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
        КонецЕсли;
        СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);        
    КонецЦикла;
    
    ЕСли КэшПоТипамДокументов.Количество() = 0 Тогда 
        Возврат СписокСвязанныхДокументов;
    КонецЕсли;
    
    ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
    ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы ";
    Запрос = Новый Запрос;
    Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
        Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
                    |ВЫБРАТЬ ", "
                    |ОБЪЕДИНИТЬ ВСЕ
                    |ВЫБРАТЬ") + "
                    |Ссылка
                    |ИЗ Документ." + КлючИЗначение.Ключ + "
                    |ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
                    
        Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);        
    КонецЦикла;
    
    Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
    
    Выборка = Запрос.Выполнить().Выбрать();    
    Пока Выборка.Следующий() Цикл
        Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
            СписокСвязанныхДокументов.Добавить(Выборка.Ссылка);
            мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
            СписокСвязанныхДокументов = ПолучитьПодчиненныеДокументы(Выборка.Ссылка, СписокСвязанныхДокументов, мУжеВСписке);
        КонецЕсли;
    КонецЦикла;
    
    Возврат СписокСвязанныхДокументов;
    
КонецФункции

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
       
    Запрос = Новый Запрос;
    ТекстЗапроса = "";
   
    Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
       
        Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
            Продолжить;
        КонецЕсли;
       
        ПутьКДанным = ЭлементСостава.ПолноеИмя();
        СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
       
		//ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
		//    Продолжить;
		//КонецЕсли;
       
        ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
        ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
       
        ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
           
        ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
        ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
        ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
        |ВЫБРАТЬ") + "
        |" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
        |" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
        |");
       
    КонецЦикла;
   
    Если ТекстЗапроса = "" Тогда
        Возврат Новый ТаблицаЗначений;
    КонецЕсли;
   
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
    Возврат Запрос.Выполнить().Выгрузить();
   
КонецФункции

Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным, МетаданныеОбъекта = Неопределено) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если МетаданныеОбъекта <> Неопределено Тогда
		Структура.Вставить("Метаданные", МетаданныеОбъекта);
	Иначе
		Если Структура.ТипОбъекта = "Документ" Тогда
			Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
		Иначе
			Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------


// 

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями.
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ.
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     > для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат;
//     > если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив из Строка
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если СтрДлина(Разделитель) = 1 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, Разделитель, Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
//                             разделителем считаются все символы, не являющиеся цифрами, 
//                             латинскими и кириллическими буквами, а также знаком подчеркивания.
//
// Возвращаемое значение:
//  Булево - Истина, если символ с кодом КодСимвола является разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат СтрНайти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Значение        - Строка - исходная строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
//
// Возвращаемое значение:
//  Массив - список слов.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один",
//  "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив
//  значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Значение, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Значение);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Значение, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции


// Выполняет преобразование арабского числа в римское.
//
// Параметры:
//  АрабскоеЧисло - Число - число, целое, от 0 до 999;
//  ИспользоватьКириллицу - Булево - использовать в качестве арабских цифр кириллицу или латиницу.
//
// Возвращаемое значение:
//  Строка - число в римской нотации.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII".
//
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспользоватьКириллицу = Истина) Экспорт
	
	РимскоеЧисло = "";
	АрабскоеЧисло = ДополнитьСтроку(АрабскоеЧисло, 3);
	
	Если ИспользоватьКириллицу Тогда
		c1 = "1"; c5 = "У"; c10 = "Х"; c50 = "Л"; c100 ="С"; c500 = "Д"; c1000 = "М";
		
	Иначе
		c1 = "I"; c5 = "V"; c10 = "X"; c50 = "L"; c100 ="C"; c500 = "D"; c1000 = "M";
		
	КонецЕсли;
	
	Единицы	= Число(Сред(АрабскоеЧисло, 3, 1));
	Десятки	= Число(Сред(АрабскоеЧисло, 2, 1));
	Сотни	= Число(Сред(АрабскоеЧисло, 1, 1));
	
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Сотни, c100, c500, c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Десятки, c10, c50, c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Единицы, c1, c5, c10);
	
	Возврат РимскоеЧисло;
	
КонецФункции 


// Выполняет преобразование цифры в римскую нотацию. 
//
// Параметры:
//  Цифра - Число - цифра от 0 до 9.
//  РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка - Строка - символы, соответствующие римским цифрам.
//
// Возвращаемое значение
//  Строка - цифра в римской нотации.
//
// Пример: 
//	СтроковыеФункцииКлиентСервер.ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII".
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра, РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка)
	
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
		РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
		РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
	
КонецФункции


//---------------------------------------------------------------------------------------------------------------------
// сохраним таблицу значений, в файл ! 
// например в ODS

ТабДокумент = Новый ТабличныйДокумент;
Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(тз1);       
Построитель.Вывести(ТабДокумент);
ТабДокумент.Записать(КаталогВременныхФайлов()+"\былоОтправленоСоСклада.ods", ТипФайлаТабличногоДокумента.ODS, );	

//---------------------------------------------------------------------------------------------------------------------
Функция ПолучитьДатуИзСтроки(Стр, ФорматДаты="")
	Д = Дата("00010101000000");
	Если ПустаяСтрока(Стр) Тогда
		Возврат Д;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ФорматДаты) Тогда
		Если Найти(ФорматДаты,".")>0 Тогда
			Если Найти(ФорматДаты,":")>0 И Найти(ФорматДаты," ")>0 Тогда 
				МассивФормат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматДаты," ");
				Возврат ПолучитьДатуИзСтроки(МассивФормат[0]);
			КонецЕсли;
			МассивФормат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматДаты,".");
		ИначеЕсли Найти(ФорматДаты,"/")>0 Тогда
			МассивФормат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматДаты,"/");
		ИначеЕсли Найти(ФорматДаты,",")>0 Тогда
			МассивФормат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматДаты,",");
		ИначеЕсли Найти(ФорматДаты,"-")>0 Тогда
			МассивФормат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматДаты,"-");
		КонецЕсли;
		Если МассивФормат.Количество()<>3 Тогда
			ФорматДаты = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Стр,".")>0 Тогда
		Если Найти(Стр,":")>0 И Найти(Стр," ")>0 Тогда 
			МассивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр," ");
			Возврат ПолучитьДатуИзСтроки(МассивДата[0]);
		КонецЕсли;
		МассивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,".");
	ИначеЕсли Найти(Стр,"/")>0 Тогда
		МассивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"/");
	ИначеЕсли Найти(Стр,",")>0 Тогда
		МассивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
	ИначеЕсли Найти(Стр,"-")>0 Тогда
		МассивДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"-");
	КонецЕсли;
	
	Попытка
		Если МассивДата.Количество()=3 Тогда //"01.02.13" или "01.02.2013"
			Если ФорматДаты <> "" Тогда
				Для й = 0 ПО МассивФормат.Количество()-1 Цикл
					ЭлементФормата = МассивФормат[й];
					Если Найти(ЭлементФормата, "д")>0 ИЛИ Найти(ЭлементФормата, "Д")>0 ИЛИ Найти(ЭлементФормата, "D")>0 ИЛИ Найти(ЭлементФормата, "d")>0 Тогда
						День = Число(МассивДата[й]);
					КонецЕсли;
					Если Найти(ЭлементФормата, "м")>0 ИЛИ Найти(ЭлементФормата, "М")>0 ИЛИ Найти(ЭлементФормата, "M")>0 ИЛИ Найти(ЭлементФормата, "m")>0 Тогда
						Месяц = Число(МассивДата[й]);
					КонецЕсли;
					Если Найти(ЭлементФормата, "г")>0 ИЛИ Найти(ЭлементФормата, "Г")>0 ИЛИ Найти(ЭлементФормата, "Y")>0 ИЛИ Найти(ЭлементФормата, "y")>0 Тогда
						Год = МассивДата[й];
						Если СтрДлина(Год)=2 Тогда
							Если Число(Год) > 50 Тогда
								Год = 1900 + Год;
							Иначе    
								Год = 2000 + Год;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Д = Дата(Год, Месяц, День);
			Иначе
				Год = ?(СтрДлина(МассивДата[2])=2,2000+МассивДата[2],МассивДата[2]);
				Д = Дата(Год, МассивДата[1], МассивДата[0]);
			КонецЕсли;            
		ИначеЕсли МассивДата.Количество()=2 Тогда //"02.13" или "02.2013";
			Год = ?(СтрДлина(МассивДата[1])=2,2000+МассивДата[1],МассивДата[1]);
			Д = Дата(Год,МассивДата[0],1);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Д;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------
// обвязка для выгрузки/загрузки файла на ФТП FTP

&НаСервере
Процедура ВыгрузитьМакетыНаСервере()
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВременныхФайлов() + "cmakets.xml");
	Запись.ЗаписатьОбъявлениеXML();  
	
	//Запись.ЗаписатьНачалоЭлемента("Документ");
	//Запись.ЗаписатьАтрибут("Организация", Строка(Выборка[0].Организация));
	//Запись.ЗаписатьКонецЭлемента();			
	
	Запись.Закрыть();	
	
	Сообщить ("макеты выгружены !!!");
	
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ВыгрузитьМакетыНаСервере();   
	
	ФайлДляЗаписи1 =  КаталогВременныхФайлов() + "cmakets.xml";
	
	ЕстьВозвраты = Новый Файл(ФайлДляЗаписи1);		
	Если ЕстьВозвраты.Существует() Тогда		
		
		Соединение = Новый FTPСоединение(
		"azov.dveri-k.ru", // адрес ftp сервера
		21, // порт сервера
		"delta", // имя пользователя
		"deltaDVK", // пароль пользователя
		Неопределено, // прокси не используется
		Ложь, // пассивный режим работы
		0, // таймаут (0 - без ограничений)
		Неопределено // незащищенное соединение
		);
		
		Соединение.УстановитьТекущийКаталог("/maket");
		Соединение.Записать(ФайлДляЗаписи1, "cmakets.xml");	
		
		Соединение = Неопределено;
		Сообщить ("файл обмена ""cmakets.xml"" записан на FTP");
		
		УдалитьФайлы(ФайлДляЗаписи1);
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМакетыНаСервере()
	
	// теперь файл лежит во временной папке
	ФайлСМакетами		= КаталогВременныхФайлов() + "cmakets.xml";	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Соединение = Новый FTPСоединение(
	"azov.dveri-k.ru", // адрес ftp сервера
	21, // порт сервера
	"delta", // имя пользователя
	"deltaDVK", // пароль пользователя
	Неопределено, // прокси не используется
	Ложь, // пассивный режим работы
	0, // таймаут (0 - без ограничений)
	Неопределено // незащищенное соединение
	);
	
	Соединение.УстановитьТекущийКаталог("/");
	
	НайденныеФайлы = Соединение.НайтиФайлы("/maket/cmakets.xml");
	Если НайденныеФайлы.Количество() > 0 Тогда
		
		Для Каждого Файл Из НайденныеФайлы Цикл 
			
			Соединение.Получить(
			Файл.ПолноеИмя,
			КаталогВременныхФайлов() + Файл.Имя);
			Сообщить ("файл макетов " + Файл.Имя + " получен из FTP");
			
			Соединение.Удалить(Файл.ПолноеИмя);
			Сообщить ("файл макетов " + Файл.Имя + " удалён из FTP");
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	
	ЗагрузитьМакетыНаСервере();
	
	
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------
Функция XDTOВТаблицуЗначений(XDTOСписок)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Если ТипЗнч(XDTOСписок) = Тип("СписокXDTO") Тогда
		
		//Создание колонок идентично колонкам в списке ХДТО
		Если XDTOСписок.Количество() > 0 тогда
			Для каждого Строка из XDTOСписок[1].Свойства() цикл
				ТаблицаЗначений.Колонки.Добавить(Строка.Имя);
			КонецЦикла;
		КонецЕсли;
		
		//Копирование ХДТО списка в таблицу значений
		Для каждого Строка из XDTOСписок цикл
			НоваяСтрока = ТаблицаЗначений.Добавить();
			Для каждого Колонка из ТаблицаЗначений.Колонки цикл
				НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];    
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(XDTOСписок) = Тип("ОбъектXDTO") Тогда
		
		Для каждого Строка из XDTOСписок.Свойства() цикл
			ТаблицаЗначений.Колонки.Добавить(Строка.Имя);
		КонецЦикла;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для каждого Колонка из ТаблицаЗначений.Колонки цикл
			НоваяСтрока[Колонка.Имя] = Строка(XDTOСписок[Колонка.Имя]);    
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

//-------------------------------
// переменная среды windows
Set WshShell = CreateObject("WScript.Shell")
Set WshEnv = WshShell.Environment
MsgBox WshEnv.Item("WINDIR")

// заполнить структуру однострочной выборкой из запроса
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
ВыборкаДетальныеЗаписи.Следующий(); //у меня запрос возвращает ровно 1 строку - так что обойдемся без цикла
СтруктураДанных = Новый Структура;
Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
   СтруктураДанных.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
КонецЦикла;

//-------------------------------
&НаКлиенте
Процедура СсылкиНаДокументВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Значение);
	
КонецПроцедуры

//-------------------------------
&НаКлиенте
Обработка =  РеквизитФормыВЗначение("Объект");
Макет = Обработка.ПолучитьМакет(<ИмяМакета>); 

//-------------------------------
// например - выгрузка запроса в XML с автоматическим созданием имен атрибутов по колонкам запроса
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВременныхФайлов() + "cmakets_"+ИНН+".xml");
	Запись.ЗаписатьОбъявлениеXML();  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	               |ИЗ
	               |	Справочник.Ценники КАК Ценники
	               |ГДЕ
	               |	НЕ Ценники.ЭтоГруппа";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Колонки = Результат.Колонки;
	Запись.ЗаписатьНачалоЭлемента("Ценники");
	
	Пока Выборка.Следующий() Цикл
		
		Запись.ЗаписатьНачалоЭлемента("Ценник");  
		Для Каждого Колонка Из Колонки Цикл
			Запись.ЗаписатьАтрибут(Колонка.Имя, Строка(Выборка[Колонка.Имя]));	
		КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;                           
	
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть();	
	
КонецПроцедуры

//---------------------
1. Чтобы вычислить, на сколько процентов одно число больше другого,
нужно первое число разделить на второе, 
умножить результат на 100 и вычесть 100.

2. меньшее разделить на большее умножить на сто и вычесть из 100
//---------------------


// отладка внешней печатной формы
Включить для ВПФ - РижимОТладки

ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим
(ищем простым поиском, она там одна такая.
Или по адресу "ОбщиеМодули" -> "ДополнительныеОтчетыИОбработки" -> "Функция ПодключитьВнешнююОбработку(Ссылка) Экспорт",
вторая строка снизу)
И заменяем на такие:
Если Ссылка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки Тогда
	Результат = Менеджер.Создать("D:\Отладка\"+Ссылка.ИмяФайла, БезопасныйРежим); //Результат можно при желании проверить.
	ИмяОбработки = Ссылка.ИмяОбъекта;	
Иначе
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);	
КонецЕсли;

Открываете свойства формы, для свойства "АвтоматическоеСохранениеДанныхВНастройках" устанавливаете значение "Использовать". В списке реквизитов формы у вас появляется флажок "Сохранение". Устанавливаете его для реквизитов, значения которых нужно сохранять между запусками обработки.


//- УНФ шаблон модуля объекта внешнего отчета
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет(); // ВидОбработкиОтчет();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.Наименование = "Анализ отгрузки заказов покупателей";
	ПараметрыРегистрации.Информация = "Анализ отгрузки заказов покупателей";
	
	Возврат ПараметрыРегистрации;
	
КонецФункции 
// А в этой функции мы указываем Тэги через запятую.
// Больше примеров в модулях объекта стандартных отчетов УНФ
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	Для Каждого НастройкиТекВарианта Из НастройкиВариантов Цикл

		//Указываем "Теги" для всех вариантов отчета
		НастройкиТекВарианта.Значение.Теги = НСтр("ru = 'Продажи'");

	КонецЦикла;
	
КонецПроцедуры

// Упомянутый реквизит
ЭтоОтчетУНФ = Истина;